name: Warm GCP APIs Manually

on:
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: 'How long to warm the APIs (in minutes)'
        required: true
        default: '30'
      sleep_seconds:
        description: 'How many seconds to wait between each API call'
        required: true
        default: '30'
      warm_ser_api:
        description: 'Warm SER API'
        required: false
        type: boolean
        default: false
      warm_stt_api:
        description: 'Warm STT API'
        required: false
        type: boolean
        default: false
      warm_llm_api:
        description: 'Warm LLM API'
        required: false
        type: boolean
        default: false
      warm_stt_ser_orchestrator_api:
        description: 'Warm STT SER Orchestrator API'
        required: false
        type: boolean
        default: false
      warm_coqui_api:
        description: 'Warm Coqui API'
        required: false
        type: boolean
        default: false

# env:
#   STT_API: "https://whisper-translate-gpu-901342520595.us-central1.run.app"
#   SER_API: "https://ser-gpu-901342520595.us-central1.run.app"
#   LLM_API: "https://deepseek-7b-gpu-901342520595.us-central1.run.app"
#   TTS_API: "https://coqui-tts-gpu-901342520595.us-central1.run.app"
#   ORCHESTRATOR_API: "https://ser-stt-gpu-901342520595.us-central1.run.app"

env:
  STT_API: ${{ secrets.STT_API_URL }}
  SER_API: ${{ secrets.SER_API_URL }}
  LLM_API: ${{ secrets.LLM_API_URL }}
  TTS_API: ${{ secrets.TTS_API_URL }}
  ORCHESTRATOR_API: ${{ secrets.ORCHESTRATOR_API_URL }}

jobs:
  warmup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Auth for STT
        id: auth_stt
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          token_format: "id_token"
          id_token_audience: ${{ env.STT_API }}
      
      - name: Auth for SER
        id: auth_ser
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          token_format: "id_token"
          id_token_audience: ${{ env.SER_API }}
      
      - name: Auth for LLM
        id: auth_llm
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          token_format: "id_token"
          id_token_audience: ${{ env.LLM_API }}

      - name: Auth for TTS
        id: auth_tts
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          token_format: "id_token"
          id_token_audience: ${{ env.TTS_API }}

      - name: Auth for Orchestrator
        id: auth_orchestrator
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          token_format: "id_token"
          id_token_audience: ${{ env.ORCHESTRATOR_API }}

      - name: Warm Selected APIs
        run: |
          duration_minutes=${{ github.event.inputs.duration_minutes }}
          sleep_seconds=${{ github.event.inputs.sleep_seconds }}
          end_time=$(( $(date +%s) + duration_minutes * 60 ))

          echo "Starting warmup for $duration_minutes minutes..."

          while [ $(date +%s) -lt $end_time ]; do
            echo "Sending warmup requests..."

            [ "${{ github.event.inputs.warm_stt_api }}" == "true" ] && \
              echo "→ STT API" && \
              curl -s -o /dev/null -w "STT -> %{http_code}\n" \
                -X POST "$STT_API/check-gpu/" \
                -H "Authorization: Bearer ${{ steps.auth_stt.outputs.id_token }}" \
                -H "Content-Type: application/json" \
                -d '{"ping": "stt"}'

            [ "${{ github.event.inputs.warm_ser_api }}" == "true" ] && \
              echo "→ SER API" && \
              curl -s -o /dev/null -w "SER -> %{http_code}\n" \
                -X POST "$SER_API/check-gpu/" \
                -H "Authorization: Bearer ${{ steps.auth_ser.outputs.id_token }}" \
                -H "Content-Type: application/json" \
                -d '{"ping": "ser"}'

            [ "${{ github.event.inputs.warm_llm_api }}" == "true" ] && \
              echo "→ LLM API" && \
              curl -s -o /dev/null -w "LLM -> %{http_code}\n" \
                -X POST "$LLM_API/api/tags" \
                -H "Authorization: Bearer ${{ steps.auth_llm.outputs.id_token }}" \
                -H "Content-Type: application/json" \
                -d '{"ping": "llm"}'

            [ "${{ github.event.inputs.warm_coqui_api }}" == "true" ] && \
              echo "→ Coqui TTS API" && \
              curl -s -o /dev/null -w "TTS -> %{http_code}\n" \
                -X POST "$TTS_API/check-gpu/" \
                -H "Authorization: Bearer ${{ steps.auth_tts.outputs.id_token }}" \
                -H "Content-Type: application/json" \
                -d '{"ping": "tts"}'

            [ "${{ github.event.inputs.warm_stt_ser_orchestrator_api }}" == "true" ] && \
              echo "→ Orchestrator API" && \
              curl -s -o /dev/null -w "Orchestrator -> %{http_code}\n" \
                -X POST "$ORCHESTRATOR_API/warm/" \
                -H "Authorization: Bearer ${{ steps.auth_orchestrator.outputs.id_token }}" \
                -H "Content-Type: application/json" \
                -d '{"ping": "orchestrator"}'


            echo "⏲️ Sleeping for $sleep_seconds seconds..."
            sleep $sleep_seconds
          done

          echo "✅ Warmup completed."

